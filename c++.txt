## c++

const : 상수로 선언할 수 있도록 도와주는 키워드
const는 변경할 수 없고, read-only memory에 올라가게 되므로 변경할 수 없다
상수를 가리키는 포인터 => 가리키는 대상은 변경이 가능하지만, 값은 변경할 수 없다.

ex) int a = 5;
int b = 10;
const int * ptr = &a;
// *ptr = 10; // 에러 발생. 포인터가 가리키는 값 변경 불가
std::cout << *ptr << std::endl; // 5
ptr = &b; // 포인터가 가리키는 대상은 변경 가능
std::cout << *ptr << std::endl; // 10

int a = 5;
int b = 10;
int * const ptr = &a;
*ptr = 7; // 포인터가 가리키는 값은 변경 가능
std::cout << *ptr << std::endl; // 7
// ptr = &b; // 에러 발생. 포인터가 가리키는 대상 변경 불가

포인터가 어디 들어가는지에 따라 크게 차이가 있다.
const가 어디 붙어 있는지도 신경을 많이 써야 할 것

int a = 5;
int b = 11;
const int * const ptr = &a;
// *ptr = 10; // 에러 발생. 포인터가 가리키는 값 변경 불가
// ptr = &b; // 에러 발생. 포인터가 가리키는 대상 변경 불가
컨스트 컨스트도 있다.

const 함수또한 존재하는데, 함수 뒤에 const를 붙이면
ex) void func(int a) const
=> 컨스트 함수. 컨스트 함수 내에서는 const가 아닌 함수의 호출이 안됨


중간에 데이터 삽입이나 삭제가 없을 경우 => vector 쓰면 좋겠다.
순차적으로 저장된 데이터를 빈번하게 검색하지 않을 경우에 vector
그러면, 순차적으로 저장된 데이터를 빈번하게 검색할 경운? 
배열을 쓰는게 맞는듯..?

여기서 알아보는 배열과 리스트의 차이
배열 : 연속적인 메모리 공간, 인덱스를 이용하여 표현하고 지역성이 있다.
리스트 : 순서가 있는 데이터 집합, 불연속적으로 메모리 공간 차지,
인덱스가 없고 포인터를 통하여 접근해야 한다.
=> 배열은 데이터의 크기가 정해져 있고, 삽입 삭제보다는 검색에서 강함
=> 리스트는 데이터의 크기가 정해지지 않고, 삽입과 삭제에서 강함

벡터 장점 : 어떠한 순서로도 원소 순회가 가능하다.

C++에서의 멤버 함수
C++ 에서 객체가 생성되면 멤버변수는 객체 내에 존재.
멤버 함수는 메모리의 한 공간에 별도로 위치하고, 
C++에서 가상 함수(virtual function)는 파생 클래스에서 재정의할 것으로 기대하는 멤버 함수를 의미합니다.
이러한 가상 함수는 자신을 호출하는 객체의 동적 타입에 따라 실제 호출할 함수가 결정됩니다. C++에서 가상 함수는 virtual 키워드를 사용하여 선언합니다.

inline 함수 : 호출 부분을 함수 전체 코드로 치환하여 컴파일
남발하면, 프로그램 크기가 너무나도 커진다.
디버깅이 매우 어렵고, 생성자 소멸자는 인라인하기 좋지 않은 함수


