CPU scheduling
running -> ready ( interrupt )
waiting -> ready ( 입출력 완료 )
ready -> running (단기 스케줄링)
running -> waiting (입출력 요청, wait)
종료

First Come First Served
=> 비선점 스케쥴링 방법, 구현이 간단하고 대기 시간은 도착순서에 따라 다름

Priority scheduling
=> 우선 순위가 가장 높은 프로세스부터 할당
문제 ) 기아 상태 : 우선순위가 낮은 프로세스는 절대로 실행될 수 없는 상황
Aging : 시간이 지날수록 우선순위가 낮은 프로세스의 우선순위를 높인다.

RR Round Robin
프로세스가 레디 큐를 순환하듯 돌면서 할당 받기
컨텍스트 스위칭에도 비용이 꽤 들어가니까 적절한 time slice 찾기

SJF
CPU 점유 시간이 가장 짧은 프로세스에 먼저 할당

SJF를 선점 형태로 사용하면? Shortest Remaning time First
SRTF => 미래를 예측하기 힘들다.
최소 평균 대기시간을 제공한다는 좋은 점..

Multilevel feedback queue 등 다양한 게 있다..

page replacement alg

=> FIFO, random, OPT, LRU등이 있다.
FIFO 메모리에 가장 오래 있던 페이지를 swap device
=> 중요한 페이지로 보내버리면..? 벨라디의 모순이 일어날 수도(메모리 늘려도 폴트가 계속일어남)

OPT => 가장 먼 미래동안 사용되지 않을 페이지를 고르기
현실적으로 불가능. 이론상 최고의 알고리즘

LRU => 최근 최소로 사용된 페이지를 swap device

LFU => 사용 빈도가 가장 적은 페이지를 교체

page fault 수는 프레임에 없을때마다 계산해주면 된다.

메모리 단편화 (fragmentation)
외부 단편화: 메모리가 할당되고 해제되는 작업이 반복되면 작은 메모리가 사이사이 빔
메모리 공간은 만족하지만, 연속적이지 않은 메모리를 할당하게 될 수 있다.

내부 단편화 : 메모리를 할당하는 최소 블록크기에 비해 사용되는 메모리가 적을 시

해결방법 : 세그멘테이션, 페이징, 메모리 풀

페이징 : 물리메모리와 가상메모리를 페이지매핑과정을 통해 대응시키기
세그멘테이션 : 서로 크기가 다른 논리적 단위인 세그먼트로 분할하여
메모리를 할당하기
