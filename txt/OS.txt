OS

컴퓨터의 메모리 구조

실행할 프로그램의 코드 ( 코드 영역 )

전역 변수, 정적 변수

사용자의 동적 할당 ( 런타임 )

지역 변수, 매개 변수 ( 컴파일 타임 )

코드 영역 => 실행할 프로그램의 코드 저장, 텍스트 영역이라고도 함

데이터 영역 => 프로그램 시작과 동시에 할당되며, 종료되면 소멸함

스택 영역 => 지역변수와 매개변수가 저장되는 영역
컴파일 시 크기가 결정되고, 메모리의 높은 주소부터 낮은 주소의 방향으로 할당

힙 영역 => 사용자가 직접 관리할 수 있는 영역
스택과 다르게 낮은 주소에서 높은 주소의 방향으로 할당됨.

힙과 스택

두 영역은 같은 공간을 공유하고, 각 영역이 상대 공간을 침범하는 일
heap overflow, stack overflow라고 함.
힙 영역이 크면 클수록 스택이 작아지고, 스택이 커지면 힙 영역이 작아짐


프로세스

Code,    Data,   heap

Thread  Thread  Thread
stack   stack   stack

프로세스? 하나 이상의 스레드에 의해 실행되는 컴퓨터 프로그램
운영체제로부터 자원을 할당받는 작업의 단위
다른 프로세스의 자원에 접근하려면 IPC를 사용해야 함

스레드

프로세스 내에서 실행되는 흐름의 단위
프로세스가 할당받은 자원을 이용하는 실행의 단위

프로세스와 스레드의 차이
스레드는 각각의 register와 stack을 가지고 있다.
프로세스의 heap, static, code, data 영역을 공유함
스레드끼리는 IPC 없이도 통신 가능 !

Context Switching
하나의 프로세스가 CPU를 사용중인 상태에서 다른 프로세스가
CPU를 사용하도록 하기 위해 사용중인 프로세스 상태 보관,
새로운 프로세스의 상태를 적재하는 작업

=> context switching 시간은 오버헤드임.
과정 : 1. 시스템은 프로세스의 상태를 PCB에 저장
2. 대기열에서 다음 프로세스를 선택하고 PCB 복원
3. PCB의 프로그램 카운터 로드되어 선택한 프로세스에서 실행 계속함

발생하는 시점
1. 멀티태스킹
2. 인터럽트 핸들링 => I/O req, time slice expired, fork a child, wait interrupt

동시성
Concurrency : 싱글 코어에서 멀티 스레드를 동작시키기 위한 방식
한 번에 여러 스레드를 다룬다.
하나의 코어에서 여러개의 스레드가 번갈아되면서 실행된다.
동시에 실행되는 것 처럼 보이지만 실제로는 시분할

병렬성
Parallelism
멀티 코어에서 멀티 스레드를 동작시키기 위한 방식
한 번에 여러 스레드 실행.
동시성을 필요로 한다.

교착상태
DeadLock
두 개 이상의 작업이 서로 상대방의 작업이 끝나기만을 기다리고 있음
=> 아무것도 완료되지 못하는 상태
발생 조건 1. 상호 배제, 2. hold and wait 3. No preemption 4. Circular wait

교착상태의 예방 = > 4가지 조건 중 한가지를 제거하여 예방하는 법
교착상태의 회피 => 자원 할당 그래프 알고리즘, 뱅커스 알고리즘
banker's alg => 자원을 요구할 때 시스템은 자원을 할당하고 나서
안정 상태가 되는지 사전에 검사함.
=> 정해진 공유자원에 대해 사용하게 해줄 순서를 고려해서 안전 순서열을 만듬
max, allocated, available 계산해서 했던 것처럼 하면 됨
교착상태의 무시 => 원래 쓰던 법
교착상태의 발견 => 발생을 체크하는 법. 성능에 큰 영향을 미칠수도
