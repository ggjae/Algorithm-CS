컴퓨터 구조

빅엔디언과 리틀엔디언

엔디언이란? 컴퓨터의 메모리와 같은 1차원의 공간에 여러개의 연속된 대상을 배열하는 방법
바이트를 배열하는 방법을 표현 => 바이트 순서 (byte order)
MSB => 큰 단위가 먼저 나오는 것 빅엔디언(Most Significant Byte)
LSB => 작은 단위가 먼저 나오는 것(Least Significant Byte)

ex) 빅엔디언은 0x1234를 12 34 로 표현하고
리틀엔디언은 34 12로 표현한다. 표현 방법이 다름 **

대부분의 컴퓨터는 리틀엔디언을 사용하고, 네트워크에서는 주소를 빅엔디언으로 사용
=> 네트워크의 영향으로 프로토콜,파일들이 빅엔디언 방식 사용중
빅엔디언 : 디버깅이 편리함. 비교시에 리틀엔디언보다 유리
리틀엔디언 : 작은 값부터 처리하므로 사칙연산에서 유리하다
LSB 는 바이트고,  LSb 는 bit임. 신경쓰면 좋을 듯

실행 파일의 생성과정
전처리기 - 컴파일러 - 어셈블러 - 링커

1. 전처리기에 의한 치환 작업
=> #include, #define 등의 지시자의 지시에 따라서 소스코드를 입맛에 맞게 변경

2. 컴파일러에 의한 번역
다양한 고급언어들을 어셈블리어로 변환 (저급언어)

3. 어셈블러에 의한 바이너리 코드 생성
어셈블리어들을 바이너리코드로 변환 (기계어)

4. 링커에 의한 연결과 결합
참조하는 함수나 라이브러리를 하나로 묶고 이 과정을 통해 실행파일 생성
로더에 의해서 코드가 메모리에 적재됨.

컴퓨터에서 실수를 어떻게 표현할까?
실수 3.625를 저장한다고 했을 때 정수부는 11(2), 소수부 0.101(2)가 될것이다.

실수의 소수부를 계산하는 방법 : 소수부분이 0이 될떄까지 2로 곱하면서 정수
부분을 분리하고, 분리된 정수부분을 위에서 아래로 붙여 읽음.
0.625 => 2를 곱하면 1.250 에서 앞 정수부분 1 분리
0.25 => 2를 곱하면 0.5 에서 앞 정수부분 0 분리
0.5 => 2를 곱하면 1 에서 앞 정수부분 1 분리 => 0.101(2)
고정 소수점 방법, 부동 소수점 방법이 있다.

고정 소수점
고정된 위치를 기준으로 정수부와 소수부로 나눔.
부호 1비트, 정수 15비트, 소수 16비트

부동 소수점

UNICODE

=> SBCS, MBCS, WBCS
SBCS는 아스키코드. MBCS는 한글 2바이트 ,영문 1바이트, WBSC => 문자표현 2바이트 /유니코드

int main()
{
    char str[] = "ABC가나"
    int size = sizeof(str);
    int len = strlen(str);
    printf("%d", size); // 8
    printf("%d", len); // 7
}

size와 len이 같다고 생각하면 안된다. 한글과 영어 공간 차지 바이트수가 다르므로..
